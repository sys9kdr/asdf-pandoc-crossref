#!/usr/bin/env bash

set -euo pipefail

current_script_path=${BASH_SOURCE[0]}
plugin_dir=$(dirname "$(dirname "$current_script_path")")

# shellcheck source=./lib/utils.bash
source "${plugin_dir}/lib/utils.bash"

mkdir -p "$ASDF_DOWNLOAD_PATH"

get_architecture() {
  local arch
  arch=$(uname -m)
  case "$arch" in
    x86_64)
      echo "X64"
      ;;
    arm64 | aarch64)
      echo "ARM64"
      ;;
    *)
      fail "Unsupported architecture: $arch"
      ;;
  esac
}

get_file_extension() {
  local os="$1"
  case "$os" in
    Windows)
      echo "7z"
      ;;
    *)
      echo "tar.xz"
      ;;
  esac
}

# Get OS, architecture, and file extension
os=$(get_os)
arch=$(get_architecture)
extension=$(get_file_extension "$os")

# Construct download filename with architecture
download_file="$TOOL_NAME-${os}-${arch}.${extension}"

# Download file to the download directory
DOWNLOAD_URL_PREFIX="https://github.com/lierdakil/pandoc-crossref/releases/download"
download_url="${DOWNLOAD_URL_PREFIX}/v${ASDF_INSTALL_VERSION}/${download_file}"
download_release "$ASDF_INSTALL_VERSION" "$download_file" "$download_url"

# Extract contents based on file type
case "$extension" in
  "tar.xz")
    tar -xf "$download_file" -C "$ASDF_DOWNLOAD_PATH" || fail "Could not extract $download_file"
    ;;
  "7z")
    # Note: This requires 7z to be installed on the system
    7z x "$download_file" -o"$ASDF_DOWNLOAD_PATH" || fail "Could not extract $download_file"
    ;;
  *)
    fail "Unsupported file extension: $extension"
    ;;
esac

# Remove the downloaded file since we don't need to keep it
rm "$download_file"
